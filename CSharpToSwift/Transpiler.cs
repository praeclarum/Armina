namespace CSharpToSwift;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.MSBuild;

class Transpiler
{
    readonly string projectFilePath;
    readonly string swiftPackageName;
    readonly string swiftPackageDir;
    readonly string sourcesDir;
    readonly MSBuildWorkspace workspace = MSBuildWorkspace.Create();
    public Transpiler(string projectFilePath)
    {
        this.projectFilePath = Path.GetFullPath(projectFilePath);
        this.swiftPackageName = Path.GetFileNameWithoutExtension(projectFilePath);
        this.swiftPackageDir = Path.Combine("/Users/fak/Work/CSharpToSwift", swiftPackageName);
        this.sourcesDir = Path.Combine(swiftPackageDir, "Sources", swiftPackageName);
    }
    static Transpiler()
    {
        Microsoft.Build.Locator.MSBuildLocator.RegisterDefaults();
        var _ = typeof(Microsoft.CodeAnalysis.CSharp.Formatting.CSharpFormattingOptions);
    }
    void Error(string message)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss")} {message}");
        Console.ResetColor();
    }
    void Info(string message)
    {
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine($"{DateTime.Now.ToString("HH:mm:ss")} {message}");
        Console.ResetColor();
    }
    
    public async Task TranspileAsync()
    {
        Directory.CreateDirectory(sourcesDir);
        var projectFileName = Path.GetFileName(projectFilePath);
        Info($"Loading project {projectFileName}...");
        var project = await workspace.OpenProjectAsync(projectFilePath);
        var projectLoadErrors = workspace.Diagnostics.Where(x => x.Kind == WorkspaceDiagnosticKind.Failure);
        foreach (var d in projectLoadErrors) {
            Error(d.Message);
        }
        if (projectLoadErrors.Any()) {
            return;
        }
        Info($"Analyzing project {project.Name}...");
        var compilation = await project.GetCompilationAsync();
        if (compilation is null) {
            Error("Failed to get compilation");
            return;
        }
        if (compilation.GetDiagnostics().Any(x => x.Severity == DiagnosticSeverity.Error)) {
            foreach (var d in compilation.GetDiagnostics()) {
                Error(d.ToString());
            }
            return;
        }
        
        Info($"Transpiling...");
        var types = new List<(MemberDeclarationSyntax Syntax, SemanticModel Model)>();
        await GetTypeDeclarationsAsync (compilation, types);

        // var outputDir = System.IO.Path.GetDirectoryName(projectFilePath);
        TextWriter NewSwiftWriter(string swiftName) {
            var fileName = $"{swiftName}.swift";
            var filePath = System.IO.Path.Combine(sourcesDir, fileName);
            return new System.IO.StreamWriter(filePath);
        }
        using (var pw = new StreamWriter(Path.Combine(swiftPackageDir, "Package.swift"))) {
            pw.WriteLine($"// swift-tools-version: 5.6");
            pw.WriteLine();
            pw.WriteLine($"import PackageDescription");
            pw.WriteLine();
            pw.WriteLine($"let package = Package(");
            pw.WriteLine($"    name: \"{swiftPackageName}\",");
            pw.WriteLine($"    products: [");
            pw.WriteLine($"        .library(name: \"{swiftPackageName}\",");
            pw.WriteLine($"                 targets: [\"{swiftPackageName}\"])");
            pw.WriteLine($"    ],");
            pw.WriteLine($"    dependencies: [");
            pw.WriteLine($"    ],");
            pw.WriteLine($"    targets: [");
            pw.WriteLine($"        .target(name: \"{swiftPackageName}\",");
            pw.WriteLine($"                dependencies: []),");
            pw.WriteLine($"    ]");
            pw.WriteLine($")");
        }
        var swift = new StringWriter();
        swift.WriteLine("// This file was generated by CSharpToSwift");
        foreach (var (node, model) in types) {
            var symbol = (INamedTypeSymbol)model.GetDeclaredSymbol(node)!;
            var swiftName = GetSwiftTypeName(symbol);
            switch (node.Kind ()) {
                case SyntaxKind.ClassDeclaration:
                    var c = (ClassDeclarationSyntax)node;
                    using (var cw = NewSwiftWriter(swiftName)) {
                        TranspileClass(swiftName, c, symbol, model, cw);
                    }
                    break;
                case SyntaxKind.StructDeclaration:
                    var s = (StructDeclarationSyntax)node;
                    break;
                case SyntaxKind.InterfaceDeclaration:
                    var i = (InterfaceDeclarationSyntax)node;
                    break;
                case SyntaxKind.EnumDeclaration:
                    var e = (EnumDeclarationSyntax)node;
                    break;
                case SyntaxKind.DelegateDeclaration:
                    var d = (DelegateDeclarationSyntax)node;
                    break;
            }
        }
        Info("Done.");
    }

    void TranspileClass(string swiftName, ClassDeclarationSyntax node, INamedTypeSymbol symbol, SemanticModel model, TextWriter w)
    {
        w.WriteLine($"class {swiftName} {{");

        foreach (var member in node.Members) {
            switch (member.Kind ()) {
                // case SyntaxKind.ConstructorDeclaration:
                //     var ctor = (ConstructorDeclarationSyntax)member;
                //     TranspileConstructor(ctor, symbol, w);
                //     break;
                // case SyntaxKind.PropertyDeclaration:
                //     var prop = (PropertyDeclarationSyntax)member;
                //     TranspileProperty(prop, symbol, w);
                //     break;
                // case SyntaxKind.MethodDeclaration:
                //     var method = (MethodDeclarationSyntax)member;
                //     TranspileMethod(method, symbol, w);
                //     break;
                // case SyntaxKind.EventDeclaration:
                //     var evt = (EventDeclarationSyntax)member;
                //     TranspileEvent(evt, symbol, w);
                //     break;
                // case SyntaxKind.IndexerDeclaration:
                //     var idx = (IndexerDeclarationSyntax)member;
                //     TranspileIndexer(idx, symbol, w);
                //     break;
                // case SyntaxKind.EventFieldDeclaration:
                //     var evtField = (EventFieldDeclarationSyntax)member;
                //     TranspileEventField(evtField, symbol, w);
                //     break;
                case SyntaxKind.FieldDeclaration:
                    var field = (FieldDeclarationSyntax)member;
                    {
                        var type = model.GetSymbolInfo(field.Declaration.Type).Symbol;
                        var typeName = GetSwiftTypeName(type);
                        var decl = symbol.IsStatic ? "static var" : "var";
                        foreach (var v in field.Declaration.Variables) {
                            var vn = v.Identifier.ToString();
                            w.WriteLine($"    {decl} {vn}: {typeName}");
                        }
                    }
                    break;
                // case SyntaxKind.ConstantFieldDeclaration:
                //     var constField = (ConstantFieldDeclarationSyntax)member;
                //     TranspileConstantField(constField, symbol, w);
                //     break;
                // case SyntaxKind.EnumMemberDeclaration:
                //     var enumMember = (EnumMemberDeclarationSyntax)member;
                //     TranspileEnumMember(enumMember, symbol, w);
                //     break;
                // case SyntaxKind.EventAccessorDeclaration:
                //     var evtAccessor = (EventAccessorDeclarationSyntax)member;
                //     TranspileEventAccessor(evtAccessor, symbol, w);
                //     break;
                default:
                    // Error($"Unhandled member kind {member.Kind()}");
                    break;
            }
        }

        w.WriteLine($"}}");
    }

    async Task GetTypeDeclarationsAsync(Compilation compilation, List<(MemberDeclarationSyntax Syntax, SemanticModel Symbol)> types)
    {
        foreach (var s in compilation.SyntaxTrees.OfType<CSharpSyntaxTree>()) {
            // Info($"Transpiling {s.FilePath}...");
            var m = compilation.GetSemanticModel(s);
            GetTypeDeclarations(await s.GetRootAsync().ConfigureAwait(false), m, compilation, types);
        }
    }

    void GetTypeDeclarations(CSharpSyntaxNode node, SemanticModel model, Compilation compilation, List<(MemberDeclarationSyntax Syntax, SemanticModel Symbol)> types)
    {
        switch (node.Kind ()) {
            case SyntaxKind.ClassDeclaration:
                var c = (ClassDeclarationSyntax)node;
                if (model.GetDeclaredSymbol(c) is INamedTypeSymbol ctype) {
                    Info($"Found class {ctype.ContainingNamespace}.{ctype.Name}");
                    types.Add((c, model));
                }
                break;
            case SyntaxKind.StructDeclaration:
                var s = (StructDeclarationSyntax)node;
                if (model.GetDeclaredSymbol(s) is INamedTypeSymbol stype) {
                    Info($"Found struct {stype.ContainingNamespace}.{stype.Name}");
                    types.Add((s, model));
                }
                break;
            case SyntaxKind.InterfaceDeclaration:
                var i = (InterfaceDeclarationSyntax)node;
                if (model.GetDeclaredSymbol(i) is INamedTypeSymbol itype) {
                    Info($"Found interface {itype.ContainingNamespace}.{itype.Name} {itype.GetType()}");
                    types.Add((i, model));
                }
                break;
            case SyntaxKind.EnumDeclaration:
                var e = (EnumDeclarationSyntax)node;
                if (model.GetDeclaredSymbol(e) is INamedTypeSymbol etype) {
                    Info($"Found enum {etype.ContainingNamespace}.{etype.Name}");
                    types.Add((e, model));
                }
                break;
            case SyntaxKind.DelegateDeclaration:
                var d = (DelegateDeclarationSyntax)node;
                if (model.GetDeclaredSymbol(d) is INamedTypeSymbol dtype) {
                    Info($"Found delegate {dtype.ContainingNamespace}.{dtype.Name}");
                    types.Add((d, model));
                }
                break;
            case SyntaxKind.NamespaceDeclaration:
                var n = (NamespaceDeclarationSyntax)node;
                foreach (var m in n.Members) {
                    GetTypeDeclarations(m, model, compilation, types);
                }
                break;
            case SyntaxKind.CompilationUnit:
                var cu = (CompilationUnitSyntax)node;
                foreach (var m in cu.Members) {
                    GetTypeDeclarations(m, model, compilation, types);
                }
                break;
            default:
                break;
        }
    }

    string GetSwiftTypeName(ISymbol? s)
    {
        if (s == null) {
            return "AnyObject";
        }
        else if (s is IArrayTypeSymbol ats) {
            return $"[{GetSwiftTypeName(ats.ElementType)}]";
        }
        else {
            var name = s.Name;
            if (string.IsNullOrEmpty(name)) {
                Error($"Symbol {s} : {s.GetType()} has no name");
                return "AnyObject";
            }
            return name;
        }
    }
}
